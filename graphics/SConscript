
# Get some functions that we need to determine our platform
import platform


# Import the base VESS environment
Import('vessEnv')
gfxEnv = vessEnv.Clone()

# Get the include and library paths as well as the list of libraries
gfxIncPath = gfxEnv['CPPPATH']
gfxLibPath = gfxEnv['LIBPATH']
gfxLibs = gfxEnv['LIBS']


# Import the VESS configuration
Import('config')

# Import our utility functions
Import('buildList addExternal')

# Get the host's operating system
opSystem = platform.system()

# Figure out which scene graph to use
sceneGraph = config.get('graphics', 'sceneGraph')

# Figure out which windowing system to use based on the operating system
if opSystem == 'Windows':

   # Use the native Windows windowing system (currently, there isn't an 
   # option for using X Windows on Windows OS, though this is possible)
   windowSystem = 'Windows'

elif opSystem == 'Linux':

   # Use the X window system
   windowSystem = 'X'


# Enumerate the common source files
commonDir = '#graphics/common'
commonSrc = 'vsCal3DBoneLoader.c++ vsCal3DMaterial.c++ vsCal3DMeshLoader.c++ \
             vsOptimizer.c++ vsParticle.c++ vsParticleSettings.c++ \
             vsParticleSystem.c++ vsScenePrinter.c++ vsSkeleton.c++ vsSkin.c++'

# Enumerate the scene graph-specific source files
sgDir = '#graphics/' + sceneGraph
sgSrc='vsAttribute.c++ vsBackfaceAttribute.c++ vsBillboardAttribute.c++ \
       vsClipAttribute.c++ vsComponent.c++ vsDatabaseLoader.c++ \
       vsDecalAttribute.c++ vsDynamicGeometry.c++ vsFogAttribute.c++ \
       vsGeometryBase.c++ vsGeometry.c++ vsGLSLProgramAttribute.c++ \
       vsGLSLShader.c++ vsGLSLUniform.c++ vsGraphicsState.c++ vsIntersect.c++ \
       vsIntersectResult.c++ vsIntersectTraverser.c++ vsLightAttribute.c++ \
       vsLineWidthAttribute.c++ vsLODAttribute.c++ vsMaterialAttribute.c++ \
       vsNode.c++ vsOSGAttribute.c++ vsOSGNode.c++ vsOSGStateSet.c++ \
       vsRenderBin.c++ vsScene.c++ vsSequenceAttribute.c++ \
       vsShaderAttribute.c++ vsShadingAttribute.c++ \
       vsSkeletonMeshGeometry.c++ vsSphereIntersect.c++ vsStateAttribute.c++ \
       vsSwitchAttribute.c++ vsTextBuilder.c++ vsTextureAttribute.c++ \
       vsTextureCubeAttribute.c++ vsTextureRectangleAttribute.c++ \
       vsTransformAttribute.c++ vsTransparencyAttribute.c++ \
       vsUnmanagedNode.c++ vsView.c++ vsViewpointAttribute.c++ \
       vsWireframeAttribute.c++'

# Add any extra source files that this specific scene graph needs
if sceneGraph == 'OSG':
   sgSrc += ' vsBillboardCallback.c++ vsDecalCallback.c++ \
             vsLocalLightCallback.c++ vsSequenceCallback.c++'

#Enumerate the scene graph and window system-specific source files
sgWsDir = '#graphics/' + sceneGraph + '_' + windowSystem
sgWsSrc = 'vsPane.c++ vsPipe.c++ vsScreen.c++ vsWindow.c++'

# Add any extra source files that this specific scene graph and window system
# combination needs
if sceneGraph == 'OSG' and windowSystem == 'Windows':
   sgWsSrc += ' vsHWND.c++'

# Add the directories to the include path
gfxIncPath.extend(Split(commonDir))
gfxIncPath.extend(Split(sgDir))
gfxIncPath.extend(Split(sgWsDir))

# Add to the include and lib settings appropriately
if sceneGraph == 'OSG':
   osgPath = config.get('graphics', 'osgPath')
   gfxIncPath.extend(Split(osgPath + '/include'))
   gfxLibPath.extend(Split(osgPath + '/lib'))
   gfxLibs.extend(Split('OpenThreads osg osgDB osgUtil osgText osgSim'))

# Create the final list of sources
gfxSrc = buildList(commonDir, commonSrc)
gfxSrc.extend(buildList(sgDir, sgSrc))
gfxSrc.extend(buildList(sgWsDir, sgWsSrc))

# Now, compile the graphics source files
gfxObjs = gfxEnv.SharedObject(gfxSrc)

# Return a tuple containing the object files and the environment we should
# use to link them
gfxTuple = gfxObjs, gfxEnv
Return('gfxTuple')

